---
layout: post
title: Dr. Jekyll man and this is my hyde side!
extended: === read more ===
---
It's that time of year again! The time of year where I decide to revive the blog - which seems to becoming common practice for me! <img src="http://farm4.static.flickr.com/3349/3423669462_cf844811c6_m.jpg" alt="" class="right pad" title="I remember taking this picture last March! Spring, yeah?" /> According to the posting history it has been over a year since I showed this place any love! So, with the start of spring, I'm giving the blog new life and much needed TLC.

Well the major change in the revision is that I've ditched Wordpress - nice! The blog is now running, or should I say generated by [Jekyll](http://github.com/mojombo/jekyll) - which is a static site generator written in Ruby.


For some reason, unbeknown to me, I grew to dislike writing any blogs in Wordpress, hell logging in even became painful for some reason! Especially when I forgot my password, twice :(, bloody idiot. I think one of the reasons I grew to dislike Wordpress was the flaky-ness you get from the WYSIWYG, seems more much logical to be writing my posts in markdown with the odd bit of HTML, as after all I should know HTML - right? :) Wordpress also felt bloated, slow and just plain old eugh! Furthermore anyone who thinks using tabs (instead of spaces) in their code base is a good idea ought to be taken out and shot in the head with a bolt gun, preferably nailed to the floor (wow where did that come from?).

=== read more ===

## Jekyll

There were several things I wanted when moving the blog to Jekyll.

- Maintain the support for comments.
- Gist for inserting code snippets.
- Maintain the archive and category listings.
- Integrate twitter, flickr and last.fm, like I had with Wordpress.

For comments I went with [Disqus](http://disqus.com) which uses JavaScript to display comments for each post, this was the simplest solution and a popular one also. For the rest of the implementations I wanted it was time to create a fork!

## The inevitable fork

It doesn't take long before you begin forking Jekyll and filling it with customisations for your situation, in fact this seems to be common practice evident by the number of forks - it is one of the most forked projects on github.

Before reinventing the wheel I decided to check out several other forks to see if they had the features I required - they did! I found the features spread over several repositories from the following github users [newbamboo](github.com/newbamboo/jekyll), [cantorrodista](http://github.com/cantorrodista/jekyll) and [henrik](github.com/henrik/jekyll).

The newbamboo fork offered support for embedding gists at compile time instead of via JavaScript. I wanted to embed the gists HTML rather than using JavaScript because I'm likely to be having several gists per coding post and didn't want the page bogged down with several JavaScript calls in the middle of the document. I cherry-picked the needed commit from the repo and also made some additions that allowed me to cache the downloaded gists (save fetching them whenever I regenerate the site) and also support for specifying a snippet file to use, mainly for use in multi-file gists.

cantorrodista's fork allowed me to generate archive index pages for each year and month, similar to how wordpress does. I implemented category index generation using the same method as cantorrodista was using to generate the archive stuff.

Finally I decided I wanted HAML support for Jekyll, I'm a hardcore HAML fan and it hurts to be without it! I tried initially to get along with Jekyll's choice of templating, [Liquid](http://www.liquidmarkup.org) but I found it horrendous and limiting - often filling the template with kak because of the way looping works. I understand why it was chosen because it means you can display the data without being able to execute ruby code, as Jekyll is used on github pages. However, there should be an option to choose whatever you want and github can just limit it to Liquid on their servers!

I had problems trying to merge in Henrik's changes, lots of conflicts that I was unsure of the correct output so I decided to lift out the needed bits of code manually and implement them in my fork. Along the way I also fixed a few issues and made it a bit more flexible (for example you can now supply HAML options in the \_config.yml file).

### My fork
[My fork](http://github.com/RichGuk/jekyll) is on my github account the [source code](http://github.com/RichGuk/27smiles) for this blog is also on there which will have examples of the different features added to Jekyll in the fork.

### Twitter, Flickr, Last.fm integration
To integrate the services I wrote some ruby scripts which pull the relevant data down from each service and format it into presentable HTML before saving this to a file for the server which could then be included into the layout.

The scripts and the jekyll command (to regenerate the site) are called via a cronjob every 5 minutes at the moment, if this becomes a problem I'll increase the time, or split the scripts up (for example call flickr every day not 5 minutes).

Here is the script used to get my twitter feed, the others can be found on the source code for this blog (on my github).

{{ 320150 | gist:'twitter.rb' }}

### Pingomatic

I also wrote a script which can be called when publishing the blog which tells [pingomatic](http://pingomatic.com/) of new content. Pingomatic should then tell the subscribed services that new content has been published!

## Migration of posts

Importing went fairly smooth and I used the provided wordpress important script in Jekyll to do the bulk of the importing, I did have to edit most of the posts though as they had several errors - a lot were due to several plugins I used in wordpress.

## Nginx setup
I use Nginx to serve all my sites and along with the move of the blog I decided to cleanup the 'vhost' file for the blog, so for anyone interested here it is.

{{ 320150 | gist:'27smiles.nginx' | prettyprint }}

## Deployment / Semi-public git!

The entire blog is hosted in a git repository and is publicly accessible on my github account. I came across with one issue however, when I'm writing a blog post and it's in draft form I ideally don't want to make this public yet but I wanted to be able to share the progress between home and work. I first tried (as I have with this post) to bump the posts into a '\_drafts' folder and make commits with the progression and only push to the repository on my fileserver (which is private) and then push to the github one when the post is made live. However upon reflection I've since decided that this would be messy and fill the commit history with minor changes so I have decided that I will create a branch for each post, share this between work and home then, when ready, merge it back into master and delete the branch.

To make deployment as simple as possible I wanted to make use of git's hooks. A [friend](http://github.com/namelessjon) was kind enough to give me the post-receive hook code he uses for one of his webby sites. I adapted it a little to suite the project at hand:

- Wrapped the entire code in a check to make sure it was the master branch; I don't need the site generating for all the 'post' branches I'll be creating.
- Calls the twitter, flickr, last.fm and pingomatic scripts before generating the site.

Here is my post-receive hook.

{{ 320150 | gist:'post-receive' }}

Now to publish a blog entry it's simply a matter of pushing to the git repository which should give you something like this.

{{ 320150 | gist:'Output from post-update' | prettyprint }}

