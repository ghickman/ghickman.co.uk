---
layout: default
title: Portfolio
---
.project
  %h2
    %a{:href=>"http://github.com/ghickman/tvrenamr", :title=>"Tv Renamr"} Tv Renamr
  %img{:src=>"/images/posts/portfolio/tvrenamr.png", :alt=>"Tv Renamr", :width=>"400px", :class=>"right"}
  %p A command line API and front end script, Tv Renamr is a utility to rename television episode files into a user desired format, such as: "Show - 000 - Foo Bar". Written in Python Tv Renamr is an open source project and is available <a href="http://github.com/ghickman/tvrenamr" title="github">Github</a> under a MIT license. The current stable release, dubbed 1.0, has a list of known issues and while it does what it was supposed to the general interface is a little clunky. This has prompted me to address the project in a different manner and try to follow the example of <a href="http://flexget.com" title="flexget">Flexget</a> with a much cleaner interface.
  
  %p The beginning of this is the use of a config file that should eliminate most of Tv Renamr's currently known issues and allow users to define how problem show names are treated in the future.

  %h4 Tv Renamr Daemon
  %p A side project of the core API is the daemon. It's still at an Alpha stage while I work out the best way to do things but in essence it will replace the tvrenamr.py module and allow a user to set a folder for Tv Renamr to watch, renaming any files that are moved into it. The benefit of this approach is two fold, users can have a drag &amp; drop interface but also have tv shows renamed automatically as they are downloaded.
  .clr


.project
  %h2
    %a{:href=>"http://ghickman.co.uk", :title=>"GHickman.co.uk"} GHickman.co.uk
  %img{:src=>"/images/posts/portfolio/ghickman.png", :alt=>"GHickman.co.uk", :title=>"GHickman", :width=>"400px", :class=>"left"}
  %p Built using a modified version of the <a href="http://github.com//jekyll" title="Jekyll by ">Jekyll</a> project from <a href="http://github.com/richguk/jekyll" title="Jekyll from Richard Grundy">Richard Grundy</a>, this is my personal blog site. As a developer I didn't need something as extensive as a fully fledged application, such as <a href="http://wordpress.org" title="Wordpress">Wordpress</a>, so it suited me perfectly to use a static site generator.
  
  %p Posts are written in markdown where html can also be use while the layouts are written in Ruby's popular markup <a href="http://haml-lang.com" title="Haml Language">Haml</a>. Jekyll processes the whole lot into the glorious plain HTML files you're viewing right now (how meta is that?!)!
  
  %p The contact page submits to a sinatra application which sends an email to me with the users message or displays the appropriate error messages to the user if they have left any of the required fields blank. 
  
  %p The advantages of this system are multitude for me. I can write posts in markdown, allowing me to do away with any sort of backend for writing the posts and yet have more control over the HTML that gets created. I don't have to worry about the resources on my VPS since the site is being served as HTML files and should I ever get hit by the <a href="http://reddit.com" title="Reddit">Reddit</a> / <a href="http://digg.com" title="Digg">Digg</a> / <a href="http://slashdot.com" title="Slashdot">Slashdot</a> effect, there is a slim hope the box won't implode from the pain! Migrating the site to another machine couldn't be easier with no database and is as easy as copying the folder. Yet the greatest bonus has to be the ability to run a development version on my local machine in parallel to the production server so testing a new post can be done locally and pushed to production using <a href="http://git-scm.org" title="Git - Distributed Version Control">Git</a>.
  .clr


.project
  %h2
    %a{:href=>"http://penderry.com", :title=>"Penderry.com"} Penderry.com
  %img{:src=>"/images/posts/portfolio/penderry.jpg", :alt=>"Penderry.com", :title=>"Penderry", :width=>"400px", :class=>"right"}
  %p Penderry.com is built in a similar way to GHickman.co.uk using Jekyll with Sinatra dealing with the contact form. The main difference is the photos on each of the pages are linked to a Flickr account with larger versions of the images being displayed using Lightbox. The <a href="http://penderry.com/tina_lewis_paintings.html" title="">Tina Lewis' Artwork</a> page is built every half an hour by a script that retrieves all the images from a private (requires authentication) Flickr set.
  .clr


.project
  %h2
    %a{:href=>"http://floodbag.co.uk", :title=>"Floodbag.co.uk"} Floodbag.co.uk
  %img{:src=>"/images/posts/portfolio/floodbag.png", :alt=>"Floodbag.co.uk", :title=>"Floodbag", :width=>"400px", :class=>"left"}
  %p Built using the PHP framework <a href="" title="Joomla!">Joomla!</a>, Floodbag showcases the range of products available under the Floodbag name allowing visitors to see the various technical specifications along with a small marketing blurb and graphic. The site's layout was created by another contractor, but I created the markup and styling in Joomla!'s templating system. The site required various tables so a plugin was used that links to a single table in the admin section letting the administrators make one update and see the changes across the whole site.
  
  %p Validation on the contact form is done using jQuery's validation plugin to provide a clean, quick response to the user.

  %p After finishing the site I trained Mangar Internationalâ€™s marketing team to update the content and the IT team to maintain the website.

  %p Hosting was provided by Mangar International from GoDaddy where I configured DNS and tested the site before it's final release into the wild.
  .clr


.project
  %h2
    %a{:href=>"/trackr.html", :title=>"Trackr"} Trackr
  %img{:src=>"/images/posts/portfolio/trackr.jpg", :alt=>"Trackr", :title=>"Trackr", :width=>"400px", :class=>"right"}
  %p Trackr is a bug and defect tracking system that I built for my university dissertation entitled: <strong>Building a Ticketing Application using Web Frameworks</strong>. It was designed to overcome some of the short comings I saw in the workflow of the support team I was part of at a previous job.
  
  %p The system is based around the philosophy that support tickets are open and available to all the relevant parties and people involved in the process thus decentralising the relevant information.
  .clr


.project
  %h2 Book Publishing Website
  %img{:src=>"/images/posts/portfolio/books.png", :alt=>"Book Publishing Website Image", :title=>"Book Publishing Website", :width=>"400px", :class=>"left"}
  %p Built using CakePHP 1.3 and MySQL, the site features a front end for visitors to purchase manuscripts from unpublished authors, paying for them through Barclays Merchant Banking service. The visitor account section allows them to revisit the site and see all the manuscripts they have purchased and to download them again if they need to.
  
  %p Authors have the ability to upload manuscripts, provide the first chapter free of charge and select as many genres as they like from the pool available. Each genre selected is charged at a monthly fee, also through Barclays. The author account section lists an Author's manuscripts and the payments they are required to make each month for the genres they have selected. Authors can edit the genres on a manuscript, having as many or as little as they wish. They are also provided with statistics on the number of times their work has been purchased.
  
  %p An admin section allows the site owners to make changes when needed - such as genre name and price or removing a manuscript with unwelcome content. All manuscripts pass through an approval process which the admin control panel gives the administrators access to.
  .clr